//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by defaulter-gen. DO NOT EDIT.

package config

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RegisterDefaults adds defaulters functions to the given scheme.
// Public to allow building arbitrary schemes.
// All generated defaulters are covering - they call all nested defaulters.
func RegisterDefaults(scheme *runtime.Scheme) error {
	scheme.AddTypeDefaultingFunc(&NetworkServicesOperator{}, func(obj interface{}) { SetObjectDefaults_NetworkServicesOperator(obj.(*NetworkServicesOperator)) })
	return nil
}

func SetObjectDefaults_NetworkServicesOperator(in *NetworkServicesOperator) {
	SetDefaults_MetricsServerConfig(&in.MetricsServer)
	SetDefaults_TLSConfig(&in.MetricsServer.TLS)
	SetDefaults_TLSConfig(&in.WebhookServer.TLS)
	SetDefaults_GatewayConfig(&in.Gateway)
	if in.Gateway.DownstreamHostnameAccountingNamespace == "" {
		in.Gateway.DownstreamHostnameAccountingNamespace = "datum-downstream-gateway-hostnames"
	}
	if in.Gateway.ListenerTLSOptions == nil {
		if err := json.Unmarshal([]byte(`{"gateway.networking.datumapis.com/certificate-issuer": "auto"}`), &in.Gateway.ListenerTLSOptions); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ValidPortNumbers == nil {
		if err := json.Unmarshal([]byte(`[80,443]`), &in.Gateway.ValidPortNumbers); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ValidProtocolTypes == nil {
		if err := json.Unmarshal([]byte(`{"80": ["HTTP"], "443": ["HTTPS"]}`), &in.Gateway.ValidProtocolTypes); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.TCPKeepaliveMinProbes == 0 {
		in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.TCPKeepaliveMinProbes = 9
	}
	if in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.TCPKeepaliveMinIdleTime == nil {
		if err := json.Unmarshal([]byte(`"5m"`), &in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.TCPKeepaliveMinIdleTime); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.TCPKeepaliveMinInterval == nil {
		if err := json.Unmarshal([]byte(`"30s"`), &in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.TCPKeepaliveMinInterval); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.TCPMaxConnectionTimeout == nil {
		if err := json.Unmarshal([]byte(`"10s"`), &in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.TCPMaxConnectionTimeout); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.HTTPMaxConnectionIdleTimeout == nil {
		if err := json.Unmarshal([]byte(`"1h"`), &in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.HTTPMaxConnectionIdleTimeout); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.HTTPMaxConnectionDuration == nil {
		if err := json.Unmarshal([]byte(`"1h"`), &in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.HTTPMaxConnectionDuration); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.HTTPMaxRequestTimeout == nil {
		if err := json.Unmarshal([]byte(`"1h"`), &in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.HTTPMaxRequestTimeout); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.ConnectionMaxBufferLimit == nil {
		if err := json.Unmarshal([]byte(`"512Ki"`), &in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.ConnectionMaxBufferLimit); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.DNSMinRefreshRate == nil {
		if err := json.Unmarshal([]byte(`"30s"`), &in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.DNSMinRefreshRate); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.HTTP2MaxInitialStreamWindowSize == nil {
		if err := json.Unmarshal([]byte(`"64Ki"`), &in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.HTTP2MaxInitialStreamWindowSize); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.HTTP2MaxInitialConnectionWindowSize == nil {
		if err := json.Unmarshal([]byte(`"1Mi"`), &in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.HTTP2MaxInitialConnectionWindowSize); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.HTTP2MaxConcurrentStreams == 0 {
		in.Gateway.ExtensionAPIValidationOptions.BackendTrafficPolicies.ClusterSettings.HTTP2MaxConcurrentStreams = 1024
	}
	if in.Gateway.ExtensionAPIValidationOptions.HTTPRouteFilters.MaxInlineBodySize == 0 {
		in.Gateway.ExtensionAPIValidationOptions.HTTPRouteFilters.MaxInlineBodySize = 1024
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.APIKeyAuth.MaxCredentialRefs == 0 {
		in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.APIKeyAuth.MaxCredentialRefs = 5
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.APIKeyAuth.MaxExtractFrom == 0 {
		in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.APIKeyAuth.MaxExtractFrom = 5
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.APIKeyAuth.MaxExtractFromFieldLength == 0 {
		in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.APIKeyAuth.MaxExtractFromFieldLength = 10
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.APIKeyAuth.MaxForwardClientIDHeaderLength == 0 {
		in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.APIKeyAuth.MaxForwardClientIDHeaderLength = 256
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.CORS.MaxFieldLength == 0 {
		in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.CORS.MaxFieldLength = 10
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.JWTProvider.MaxClaimToHeaders == 0 {
		in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.JWTProvider.MaxClaimToHeaders = 5
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.JWTProvider.MaxExtractorLength == 0 {
		in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.JWTProvider.MaxExtractorLength = 5
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.OIDC.MaxScopes == 0 {
		in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.OIDC.MaxScopes = 5
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.OIDC.MaxResources == 0 {
		in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.OIDC.MaxResources = 5
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.OIDC.MinRefreshTokenTTL == nil {
		if err := json.Unmarshal([]byte(`"5m"`), &in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.OIDC.MinRefreshTokenTTL); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.Authorization.MaxRules == 0 {
		in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.Authorization.MaxRules = 20
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.Authorization.MaxClientCIDRs == 0 {
		in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.Authorization.MaxClientCIDRs = 5
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.TCPKeepaliveMinProbes == 0 {
		in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.TCPKeepaliveMinProbes = 9
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.TCPKeepaliveMinIdleTime == nil {
		if err := json.Unmarshal([]byte(`"5m"`), &in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.TCPKeepaliveMinIdleTime); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.TCPKeepaliveMinInterval == nil {
		if err := json.Unmarshal([]byte(`"30s"`), &in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.TCPKeepaliveMinInterval); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.TCPMaxConnectionTimeout == nil {
		if err := json.Unmarshal([]byte(`"10s"`), &in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.TCPMaxConnectionTimeout); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.HTTPMaxConnectionIdleTimeout == nil {
		if err := json.Unmarshal([]byte(`"1h"`), &in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.HTTPMaxConnectionIdleTimeout); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.HTTPMaxConnectionDuration == nil {
		if err := json.Unmarshal([]byte(`"1h"`), &in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.HTTPMaxConnectionDuration); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.HTTPMaxRequestTimeout == nil {
		if err := json.Unmarshal([]byte(`"1h"`), &in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.HTTPMaxRequestTimeout); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.ConnectionMaxBufferLimit == nil {
		if err := json.Unmarshal([]byte(`"512Ki"`), &in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.ConnectionMaxBufferLimit); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.DNSMinRefreshRate == nil {
		if err := json.Unmarshal([]byte(`"30s"`), &in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.DNSMinRefreshRate); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.HTTP2MaxInitialStreamWindowSize == nil {
		if err := json.Unmarshal([]byte(`"64Ki"`), &in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.HTTP2MaxInitialStreamWindowSize); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.HTTP2MaxInitialConnectionWindowSize == nil {
		if err := json.Unmarshal([]byte(`"1Mi"`), &in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.HTTP2MaxInitialConnectionWindowSize); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.HTTP2MaxConcurrentStreams == 0 {
		in.Gateway.ExtensionAPIValidationOptions.SecurityPolicies.ClusterSettings.HTTP2MaxConcurrentStreams = 1024
	}
	SetDefaults_GatewayResourceReplicatorConfig(&in.Gateway.ResourceReplicator)
	if in.HTTPProxy.GatewayClassName == "" {
		in.HTTPProxy.GatewayClassName = "datum-external-global-proxy"
	}
	SetDefaults_DiscoveryConfig(&in.Discovery)
	if in.DomainVerification.RetryIntervals == nil {
		if err := json.Unmarshal([]byte(`[{"interval": "5s", "maxElapsed": "5m"}, {"interval": "1m", "maxElapsed": "15m"}, {"interval": "5m"}]`), &in.DomainVerification.RetryIntervals); err != nil {
			panic(err)
		}
	}
	if in.DomainVerification.RetryJitterMaxFactor == 0 {
		in.DomainVerification.RetryJitterMaxFactor = 0.25
	}
	if in.DomainVerification.MaxConcurrentVerifications == 0 {
		in.DomainVerification.MaxConcurrentVerifications = 20
	}
	if in.DomainVerification.DNSVerificationRecordPrefix == "" {
		in.DomainVerification.DNSVerificationRecordPrefix = "_datum-custom-hostname"
	}
	if in.DomainVerification.HTTPVerificationTokenPath == "" {
		in.DomainVerification.HTTPVerificationTokenPath = ".well-known/datum-custom-hostname-challenge"
	}
	if in.DomainRegistration.RefreshInterval == nil {
		if err := json.Unmarshal([]byte(`"24h"`), &in.DomainRegistration.RefreshInterval); err != nil {
			panic(err)
		}
	}
	if in.DomainRegistration.RetryBackoff == nil {
		if err := json.Unmarshal([]byte(`"1h"`), &in.DomainRegistration.RetryBackoff); err != nil {
			panic(err)
		}
	}
	if in.DomainRegistration.JitterMaxFactor == 0 {
		in.DomainRegistration.JitterMaxFactor = 0.2
	}
	if in.DomainRegistration.LookupTimeout == nil {
		if err := json.Unmarshal([]byte(`"15s"`), &in.DomainRegistration.LookupTimeout); err != nil {
			panic(err)
		}
	}
	if in.DomainRegistration.WhoisBootstrapHost == "" {
		in.DomainRegistration.WhoisBootstrapHost = "whois.iana.org"
	}
}

//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by defaulter-gen. DO NOT EDIT.

package config

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RegisterDefaults adds defaulters functions to the given scheme.
// Public to allow building arbitrary schemes.
// All generated defaulters are covering - they call all nested defaulters.
func RegisterDefaults(scheme *runtime.Scheme) error {
	scheme.AddTypeDefaultingFunc(&NetworkServicesOperator{}, func(obj interface{}) { SetObjectDefaults_NetworkServicesOperator(obj.(*NetworkServicesOperator)) })
	return nil
}

func SetObjectDefaults_NetworkServicesOperator(in *NetworkServicesOperator) {
	SetDefaults_MetricsServerConfig(&in.MetricsServer)
	SetDefaults_TLSConfig(&in.MetricsServer.TLS)
	SetDefaults_TLSConfig(&in.WebhookServer.TLS)
	SetDefaults_GatewayConfig(&in.Gateway)
	if in.Gateway.DownstreamHostnameAccountingNamespace == "" {
		in.Gateway.DownstreamHostnameAccountingNamespace = "datum-downstream-gateway-hostnames"
	}
	if in.Gateway.ListenerTLSOptions == nil {
		if err := json.Unmarshal([]byte(`{"gateway.networking.datumapis.com/certificate-issuer": "auto"}`), &in.Gateway.ListenerTLSOptions); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ValidPortNumbers == nil {
		if err := json.Unmarshal([]byte(`[80,443]`), &in.Gateway.ValidPortNumbers); err != nil {
			panic(err)
		}
	}
	if in.Gateway.ValidProtocolTypes == nil {
		if err := json.Unmarshal([]byte(`{"80": ["HTTP"], "443": ["HTTPS"]}`), &in.Gateway.ValidProtocolTypes); err != nil {
			panic(err)
		}
	}
	if in.HTTPProxy.GatewayClassName == "" {
		in.HTTPProxy.GatewayClassName = "datum-external-global-proxy"
	}
	SetDefaults_DiscoveryConfig(&in.Discovery)
	if in.DomainVerification.RetryIntervals == nil {
		if err := json.Unmarshal([]byte(`[{"interval": "5s", "maxElapsed": "5m"}, {"interval": "1m", "maxElapsed": "15m"}, {"interval": "5m"}]`), &in.DomainVerification.RetryIntervals); err != nil {
			panic(err)
		}
	}
	if in.DomainVerification.RetryJitterMaxFactor == 0 {
		in.DomainVerification.RetryJitterMaxFactor = 0.25
	}
	if in.DomainVerification.MaxConcurrentVerifications == 0 {
		in.DomainVerification.MaxConcurrentVerifications = 20
	}
	if in.DomainVerification.DNSVerificationRecordPrefix == "" {
		in.DomainVerification.DNSVerificationRecordPrefix = "_datum-custom-hostname"
	}
	if in.DomainVerification.HTTPVerificationTokenPath == "" {
		in.DomainVerification.HTTPVerificationTokenPath = ".well-known/datum-custom-hostname-challenge"
	}
}

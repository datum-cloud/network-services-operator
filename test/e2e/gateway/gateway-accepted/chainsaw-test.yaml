# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: gateway-accepted
spec:
  steps:
    - name: Create CA
      try:
        - create:
            resource:
              apiVersion: cert-manager.io/v1
              kind: Issuer
              metadata:
                name: test-gateway
              spec:
                selfSigned: {}

    - name: Create GatewayClass for the upstream gateways
      try:
        - create:
            resource:
              apiVersion: gateway.networking.k8s.io/v1
              kind: GatewayClass
              metadata:
                name: datum-external-global-proxy
              spec:
                controllerName: gateway.networking.datumapis.com/external-global-proxy-controller

    - name: Create GatewayClass for the downstream gateways
      try:
        - create:
            resource:
              apiVersion: gateway.envoyproxy.io/v1alpha1
              kind: EnvoyProxy
              metadata:
                name: custom-proxy-config
                namespace: envoy-gateway-system
              spec:
                provider:
                  type: Kubernetes
                  kubernetes:
                    envoyService:
                      type: ClusterIP
                      patch:
                        type: StrategicMerge
                        value:
                          spec:
                            ipFamilyPolicy: RequireDualStack
                mergeGateways: true

        - create:
            resource:
              apiVersion: gateway.networking.k8s.io/v1
              kind: GatewayClass
              metadata:
                name: envoy-gateway
              spec:
                controllerName: gateway.envoyproxy.io/gatewayclass-controller
                parametersRef:
                  group: gateway.envoyproxy.io
                  kind: EnvoyProxy
                  name: custom-proxy-config
                  namespace: envoy-gateway-system

    - name: Provision Gateway
      try:
        - create:
            resource:
              apiVersion: gateway.networking.k8s.io/v1
              kind: Gateway
              metadata:
                name: test-gateway
              spec:
                gatewayClassName: datum-external-global-proxy
                listeners:
                - protocol: HTTP
                  port: 80
                  name: http
                  allowedRoutes:
                    namespaces:
                      from: Same
                - protocol: HTTPS
                  port: 443
                  name: https
                  allowedRoutes:
                    namespaces:
                      from: Same
                  tls:
                    mode: Terminate
                    # TODO(jreese), consider using `options` as an alternative?
                    # options:
                    #   gateway.networking.datumapis.com/certificate-issuer: letsencrypt
                    certificateRefs:
                      - group: cert-manager.io
                        kind: Issuer
                        name: test-gateway
            outputs:
              - name: upstreamGateway
                match:
                  apiVersion: gateway.networking.k8s.io/v1
                  kind: Gateway
                  metadata:
                    name: test-gateway
                value: (@)

        # Ensure the downstream gateway was created as expected
        - assert:
            # timeout: 5s
            resource:
              apiVersion: gateway.networking.k8s.io/v1
              kind: Gateway
              metadata:
                name: test-gateway-7c27512b7c3eb57ce8fbbc32e99271b883da4a709df009614603725ded747145
              spec:
                listeners:
                - allowedRoutes:
                    namespaces:
                      from: Same
                  hostname: (join('.', [$upstreamGateway.metadata.uid, 'prism.global.datum-dns.net']))
                  name: http-0
                  port: 80
                  protocol: HTTP
                - allowedRoutes:
                    namespaces:
                      from: Same
                  hostname: (join('.', [$upstreamGateway.metadata.uid, 'prism.global.datum-dns.net']))
                  name: https-0
                  port: 443
                  protocol: HTTPS
                  tls:
                    certificateRefs:
                    - group: ""
                      kind: Secret
                      name: test-gateway-7c27512b7c3eb57ce8fbbc32e99271b883da4a709df009614603725ded747145
                    mode: Terminate
                - allowedRoutes:
                    namespaces:
                      from: Same
                  hostname: (join('.', ['v4', $upstreamGateway.metadata.uid, 'prism.global.datum-dns.net']))
                  name: http-1
                  port: 80
                  protocol: HTTP
                - allowedRoutes:
                    namespaces:
                      from: Same
                  hostname: (join('.', ['v4', $upstreamGateway.metadata.uid, 'prism.global.datum-dns.net']))
                  name: https-1
                  port: 443
                  protocol: HTTPS
                  tls:
                    certificateRefs:
                    - group: ""
                      kind: Secret
                      name: test-gateway-7c27512b7c3eb57ce8fbbc32e99271b883da4a709df009614603725ded747145
                    mode: Terminate
                - allowedRoutes:
                    namespaces:
                      from: Same
                  hostname: (join('.', ['v6', $upstreamGateway.metadata.uid, 'prism.global.datum-dns.net']))
                  name: http-2
                  port: 80
                  protocol: HTTP
                - allowedRoutes:
                    namespaces:
                      from: Same
                  hostname: (join('.', ['v6', $upstreamGateway.metadata.uid, 'prism.global.datum-dns.net']))
                  name: https-2
                  port: 443
                  protocol: HTTPS
                  tls:
                    certificateRefs:
                    - group: ""
                      kind: Secret
                      name: test-gateway-7c27512b7c3eb57ce8fbbc32e99271b883da4a709df009614603725ded747145
                    mode: Terminate
              status:
                conditions:
                - reason: Accepted
                  status: "True"
                  type: Accepted
                - reason: Programmed
                  status: "True"
                  type: Programmed
                listeners:
                - attachedRoutes: 0
                  conditions:
                  - reason: Programmed
                    status: "True"
                    type: Programmed
                  - reason: Accepted
                    status: "True"
                    type: Accepted
                  - reason: ResolvedRefs
                    status: "True"
                    type: ResolvedRefs
                  name: http-0
                - attachedRoutes: 0
                  conditions:
                  - reason: Programmed
                    status: "True"
                    type: Programmed
                  - reason: Accepted
                    status: "True"
                    type: Accepted
                  - reason: ResolvedRefs
                    status: "True"
                    type: ResolvedRefs
                  name: https-0
                - attachedRoutes: 0
                  conditions:
                  - reason: Programmed
                    status: "True"
                    type: Programmed
                  - reason: Accepted
                    status: "True"
                    type: Accepted
                  - reason: ResolvedRefs
                    status: "True"
                    type: ResolvedRefs
                  name: http-1
                - attachedRoutes: 0
                  conditions:
                  - reason: Programmed
                    status: "True"
                    type: Programmed
                  - reason: Accepted
                    status: "True"
                    type: Accepted
                  - reason: ResolvedRefs
                    status: "True"
                    type: ResolvedRefs
                  name: https-1
                - attachedRoutes: 0
                  conditions:
                  - reason: Programmed
                    status: "True"
                    type: Programmed
                  - reason: Accepted
                    status: "True"
                    type: Accepted
                  - reason: ResolvedRefs
                    status: "True"
                    type: ResolvedRefs
                  name: http-2
                - attachedRoutes: 0
                  conditions:
                  - reason: Programmed
                    status: "True"
                    type: Programmed
                  - reason: Accepted
                    status: "True"
                    type: Accepted
                  - reason: ResolvedRefs
                    status: "True"
                    type: ResolvedRefs
                  name: https-2

        # Load the downstream gateway so we can get the IP address info from its
        # status.
        #
        # Unfortunately outputs don't work on `assert` or `get`.
        # See: https://github.com/kyverno/chainsaw/issues/1034
        - script:
            skipCommandOutput: true
            skipLogOutput: true
            content: |
              kubectl -n $NAMESPACE get gateway test-gateway-7c27512b7c3eb57ce8fbbc32e99271b883da4a709df009614603725ded747145 -o json
            outputs:
              - name: downstreamGateway
                value: (json_parse($stdout))
              - name: downstreamGatewayV4Addresses
                value: ($downstreamGateway.status.addresses[?contains(value, '.')].value)
              - name: downstreamGatewayV6Addresses
                value: ($downstreamGateway.status.addresses[?contains(value, ':')].value)

        # Ensure DNSEndpoint is defined and that targets match the addresses
        # provisioned to the downstream gateway.
        - assert:
            # timeout: 5s
            bindings:
              - name: primaryHostname
                value: (join('.', [$upstreamGateway.metadata.uid, 'prism.global.datum-dns.net']))
              - name: v4IPFamilyHostname
                value: (join('.', ['v4', $primaryHostname]))
              - name: v6IPFamilyHostname
                value: (join('.', ['v6', $primaryHostname]))
            resource:
              apiVersion: externaldns.k8s.io/v1alpha1
              kind: DNSEndpoint
              metadata:
                name: test-gateway-7c27512b7c3eb57ce8fbbc32e99271b883da4a709df009614603725ded747145
              spec:
                endpoints:
                  - dnsName: ($primaryHostname)
                    targets: ($downstreamGatewayV4Addresses)
                    recordType: A
                    recordTTL: 300
                  - dnsName: ($primaryHostname)
                    targets: ($downstreamGatewayV6Addresses)
                    recordType: AAAA
                    recordTTL: 300
                  - dnsName: ($v4IPFamilyHostname)
                    targets: ($downstreamGatewayV4Addresses)
                    recordType: A
                    recordTTL: 300
                  - dnsName: ($v6IPFamilyHostname)
                    targets: ($downstreamGatewayV6Addresses)
                    recordType: AAAA
                    recordTTL: 300

        # Ensure the upstream gateway's status is updated as expected
        - assert:
            # timeout: 5s
            resource:
              apiVersion: gateway.networking.k8s.io/v1
              kind: Gateway
              metadata:
                name: test-gateway
              status:
                addresses:
                  - type: Hostname
                    value: (join('.', [$upstreamGateway.metadata.uid, 'prism.global.datum-dns.net']))
                  - type: Hostname
                    value: (join('.', ['v4', $upstreamGateway.metadata.uid, 'prism.global.datum-dns.net']))
                  - type: Hostname
                    value: (join('.', ['v6', $upstreamGateway.metadata.uid, 'prism.global.datum-dns.net']))
                listeners:
                  - attachedRoutes: 0
                    (conditions[?type == 'Programmed']):
                      - status: "True"
                    (conditions[?type == 'Accepted']):
                      - status: "True"
                    (conditions[?type == 'ResolvedRefs']):
                      - status: "True"
                    name: http
                  - attachedRoutes: 0
                    (conditions[?type == 'Programmed']):
                      - status: "True"
                    (conditions[?type == 'Accepted']):
                      - status: "True"
                    (conditions[?type == 'ResolvedRefs']):
                      - status: "True"
                    name: https
                (conditions[?type == 'Accepted']):
                  - status: "True"
                (conditions[?type == 'Programmed']):
                 - status: "True"
      catch:
        - script:
            content: |
              kubectl -n network-services-operator-system logs -l app.kubernetes.io/name=network-services-operator
              kubectl get gateways --all-namespaces -o yaml
              kubectl get httproutes --all-namespaces -o yaml
              kubectl get dnsendpoints --all-namespaces -o yaml
              kubectl get svc -n envoy-gateway-system -l 'app.kubernetes.io/managed-by!=Helm' -o yaml

    - name: Provision HTTPRoute
      try:
        - create:
            resource:
              apiVersion: gateway.networking.k8s.io/v1
              kind: HTTPRoute
              metadata:
                name: test-route
              spec:
                parentRefs:
                - name: test-gateway
                  kind: Gateway
                rules:
                  - matches:
                    - path:
                        type: PathPrefix
                        value: /
        - assert:
            resource:
              apiVersion: gateway.networking.k8s.io/v1
              kind: HTTPRoute
              metadata:
                name: test-route
              status:
                parents:
                - conditions:
                  - reason: Accepted
                    status: "True"
                    type: Accepted
                  - reason: ResolvedRefs
                    status: "True"
                    type: ResolvedRefs
                  parentRef:
                    name: test-gateway
                    kind: Gateway
                    group: gateway.networking.k8s.io
      catch:
        - script:
            content: |
              kubectl -n network-services-operator-system logs -l app.kubernetes.io/name=network-services-operator
              kubectl get gateways --all-namespaces -o yaml
              kubectl get httproutes --all-namespaces -o yaml
              kubectl get dnsendpoints --all-namespaces -o yaml
              kubectl get svc -n envoy-gateway-system -l 'app.kubernetes.io/managed-by!=Helm' -o yaml
